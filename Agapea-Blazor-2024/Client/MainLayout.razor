@using AgapeaBlazor2024.Client.Models.Services.Interfaces
@using AgapeaBlazor2024.Client.Pages.zonaTienda
@using System.Text.RegularExpressions

@implements IDisposable
@inherits LayoutComponentBase


@inject IStorageService storageSvc
@inject NavigationManager navigate
@inject IRestService restSvc


<header>
        <div class="container-lg m-0 p-0">
            <div class="col-12 vw-100">
                <div class="row bg-negro m-0 p-0">
                    <div class="row">
                        <!-- botones de contacto y login/acceso a panel de usuario si esta usuario logueado -->
                        <div class="col-9"></div>
                        <div class="col-3">

                            <!-- link acceso al panel Cliente o login en funcion si se le pasa desde el controlador variable de sesion a la vista...-->
                            <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                                <a href="#" class="btn btn-negro btn-sm">
                                    <img src="/images/botonMINIcontacto.png">
                                </a>
                                <!-- si datoscliente es null, al LOGIN si no a PANEL DEL CLIENTE ....-->
                                @if (this.clienteLogged != null )
                                {
                                    <a onclick="@(()=>this.navigate.NavigateTo("/Cliente/Panel/InicioPanel"))" class="btn br-negro btn-sm">
                                    <span style="color:white">@this.clienteLogged.Credenciales.Email</span>
                                    </a>
                                <a onclick="@(()=>this.navigate.NavigateTo("/Cliente/Panel/MisOpiniones"))" class="btn br-negro btn-sm">
                                    <span style="color:white">Opiniones</span>
                                </a>

                                } else
                                    {
                                        <a onclick="@(()=>this.navigate.NavigateTo("/Cliente/Login"))" class="btn br-negro btn-sm">
                                            <img src="/images/botonMINIlogin.png">
                                        </a>
                                }
                        </div>
                    </div>
                </div>
            </div>
            <nav class="row bg-light vw-100 m-0 border border-bottom-2">
                <div class="row p-3 container me-0 ms-5">
                    <div class="col-4 d-flex align-content-center justify-content-center ps-5">
                        <a class="p-2" onclick="@(()=>this.navigate.NavigateTo("/Tienda/Libros"))">
                            <img src="/images/agapea-logo.png" alt="" width="auto" height="40" />
                        </a>
                    </div>
                    <div class="col-4">
                        <form method="post">
                            <div class="bg-gray border border-5 border w-75 h-100 d-flex flex-row">
                                <div class="p-1 flex-fill">
                                    <input class="border-0 w-100 h-100" type="text" name="cajatext" placeholder="Buscar por libro, autor, ISBN..." />
                                </div>
                                <div class="bg-primary p-2 border border-5 border-end-0 border-top-0 border-bottom-0">
                                    <a id="botonBuscar" onclick="javascript:document.forms[0].submit()"><img src="/images/lupa.png" width="auto" height="20" /></a>
                                </div>
                            </div>

                        </form>
                    </div>
                    <div class="col-4 p-0">
                        <div class="w-50 h-100">
                            <!-- mini carrito -->
                            <a onclick="@(()=>this.navigate.NavigateTo("/Pedido/MostrarPedido"))" class="h-100 bg-white border border-dark border-1 btn btn-light">
                                <img src="/images/boton_mini_carrito.png" />
                                <span class="text-dark badge badge-danger  ps-1 pe-1"> <small>Total:</small> <span class="text-end" id="precioCarrito" style="width: 110px; font-size: 1.2em">0.00 €</span></span>

                                <img class="align-content-lg-center" src="/images/boton_flecha_minicarrito.png" />
                            </a>
                        </div>
                    </div>
                </div>
            </nav>
        </div>
    </div>

</header>

<div class="container">
    <div class="row">
        <!-- no muestro panel en:  /Cliente/Login,Registro  /Tienda/MostrarPedido-->
        @if (Regex.IsMatch(this.navigate.Uri,"(/Cliente/(Login|Registro)|/Tienda/MostrarPedido)"))
        {
            <div class="col-12 mt-4">
                @Body
            </div>
        } else
        {
            <div class="col-3 border border-bottom-0 border-top-0 border-start-0 border-end-1 border-dark">
                <PanelCategoriasLibros></PanelCategoriasLibros>
            </div>

            <div class="col-9 mt-4">
                @Body
            </div>
        }
    </div>
</div>

@code{
    public Cliente clienteLogged { get; set; }

    protected override async Task OnInitializedAsync(){
        /*
        * 
        MainLayout
        header <--- boton Login | email-usurio acceso panel
                     ----------------------------------------ç
                                 \---> storageSvc.RecuperarDatosCliente() si es asincrono no espero, invoco
         sigo mostrando layout...

         (al cabo del tiempo, storageSvc tiene datos cliente logueado ===> dispara evento
         (ejectuamos manejador de eventos q tenemos a la escucha para el mismo)
        */

        //añado manejador de eventos (listener) q produce IndexedDBService cuando recibe datos...
        this.storageSvc.ClienteRecupIndexedDBEvent += RecuperarDatos;


        //await this.storageSvc.RecuperarDatosClienteAsync(); <--- para servicio indexedDB...
        this.storageSvc.RecuperarDatosCliente();

    }

    //metodo listener dispara cuando servicio indexedDB recupera datos, el 1º argumento siempre es de tipo object para
    //mapear quien provoca el evento, el resto de args. depende de lo q devuelve el evento cuando se provcoa
    private void RecuperarDatos(object sender, Cliente datoscliente){
        this.clienteLogged = datoscliente;
        StateHasChanged();
    }

    public void Dispose()
    {
        this.storageSvc.ClienteRecupIndexedDBEvent -= RecuperarDatos;
    }
}
